try this if yu like :https://django-easy-pdf.readthedocs.io/en/v0.2.0-dev1/api.html

# from django_renderpdf.views import PDFView

# class MyPDF(LoginRequiredMixin, PDFView):
# 	# https://django-renderpdf.readthedocs.io/en/latest/
# 	template_name = 'front/pdf.html'
# 	prompt_download = False
# 	pdf_filename = 'foo.pdf'

# 	@property
# 	#work if prompt_download = True
# 	def download_name(self):
# 		return f"document_bla-bla.pdf"

# 	def get_context_data(self, *args, **kwargs):
# 		context = super().get_context_data(*args, **kwargs)
# 		context['journals'] = AccountingJournal.objects.all()
# 		return context

------------------------------ 

@login_required
def export_pdf(request):
	# create a file of ms-excel type
	response = HttpResponse(content_type='application/pdf')
	#pop up download window
	# response['Content-Disposition'] = 'attachment; filename="journal.pdf"'
	#wiew pdf and download
	response['Content-Disposition'] = 'inline; filename="mypdf.pdf"'
	response['Content-Transfer-Encoding'] = 'binary'
	if request.user.is_admin:
		#admin user can retrive all users data
		data = AccountingJournal.objects.all()
	else:
		#authenticated user can retrive his own data
		data = AccountingJournal.objects.filter(author = request.user)
	html_string = render_to_string('front/pdf.html', {'journals':data})
	html = HTML(string = html_string)
	result = html.write_pdf()
	with tempfile.NamedTemporaryFile(delete = True) as output:
		output.write(result)
		output.flush()
		output = open(output.name,'rb')
		response.write(output.read())
	return response
  
--------------------------------------------------------

# from wkhtmltopdf.views import PDFTemplateView

# class MyPDF(PDFTemplateView):
# 	filename = 'my_pdf.pdf'
# 	template_name = 'front/pdf.html'
# 	cmd_options = {'margin-top': 3,}

# 	def get_context_data(self, *args, **kwargs):
# 		context = super().get_context_data(*args, **kwargs)
# 		context['journals'] = AccountingJournal.objects.all()
# 		return context

----------------------------------------------------------------

from io import BytesIO
from django.http import HttpResponse
from django.template.loader import get_template

from xhtml2pdf import pisa

def render_to_pdf(template_src, context_dict={}):
    template = get_template(template_src)
    html  = template.render(context_dict)
    result = BytesIO()
    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
    if not pdf.err:
        return HttpResponse(result.getvalue(), content_type='application/pdf')
    return None

class GeneratePDF(View):
    def get(self, request, *args, **kwargs):
        template = get_template('invoice.html')
        context = {
            "invoice_id": 123,
            "customer_name": "John Cooper",
            "amount": 1399.99,
            "today": "Today",
        }
        html = template.render(context)
        pdf = render_to_pdf('invoice.html', context)
        if pdf:
            response = HttpResponse(pdf, content_type='application/pdf')
            filename = "Invoice_%s.pdf" %("12341231")
            content = "inline; filename='%s'" %(filename)
            download = request.GET.get("download")
            if download:
                content = "attachment; filename='%s'" %(filename)
            response['Content-Disposition'] = content
            return response
        return HttpResponse("Not found")
